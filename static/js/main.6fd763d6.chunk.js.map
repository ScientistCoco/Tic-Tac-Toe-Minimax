{"version":3,"sources":["components/WhoWon/WhoWon.tsx","components/Board/Board.tsx","components/Piece/Piece.tsx","Game.tsx","components/Button/Button.tsx","Mechanics.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["GameState","Board","props","grid","onClicked","react_default","a","createElement","className","map","item","key","data-index","onClick","Piece","id","on","piece","classnames","Piece__Label--on","Pieces","WhoWon","gameState","Button","Object","assign","label","winningSquares","hasPlayerWon","board","i","length","findEmptySquares","emptySquares","push","evaluateGame","computerPlayer","humanPlayer","score","minimax","player","depth","bestMoveAndScore","move","forEach","index","tempMoveAndScore","Modal","setAppElement","Game","_React$Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hasGameEnded","_this$state","state","computerPiece","playerPiece","setState","Lose","Win","Draw","closeWhoWonModal","showModal","openWhoWonModal","onSquareClicked","_ref","asyncToGenerator","regenerator_default","mark","_callee","_this$state2","turn","nextPlayer","wrap","_context","prev","next","undefined","abrupt","splice","X","O","getComputerMove","stop","_x","apply","arguments","_this$state3","resetGame","Array","fill","inherits","createClass","value","_this$state4","lib_default","overlayClassName","isOpen","shouldCloseOnEsc","shouldCloseOnOverlayClick","onRequestClose","WhoWon_WhoWon_WhoWon","Piece_Piece_Piece","Board_Board_Board","Button_Button_Button","React","Component","App","Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fd763d6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './WhoWon.scss';\r\n\r\ninterface IWhoWon {\r\n    gameState: GameState | undefined;\r\n}\r\n\r\nexport enum GameState {\r\n    Draw = \"Draw\",\r\n    Win = \"Win\",\r\n    Lose = \"Lose\"\r\n}\r\n\r\nexport const WhoWon = (props: IWhoWon) => {\r\n    const { gameState } = props;\r\n\r\n    return (\r\n            <div className=\"WhoWon\">\r\n                {gameState === \"Draw\" && \"Its a draw!\"}\r\n                {gameState === \"Win\" && \"You won!\"}\r\n                {gameState === \"Lose\" && \"You lost\"}\r\n            </div>\r\n    )\r\n}","import './Board.scss';\r\nimport React, { Component } from 'react';\r\n\r\ninterface IBoard {\r\n    grid: Array<string>,\r\n    onClicked: (key: number) => void\r\n}\r\n\r\nexport const Board = (props: IBoard) => {     \r\n    const { grid, onClicked } = props;\r\n\r\n    return (\r\n        <div className=\"Board\">\r\n            {grid.map((item: any, key: number) =>                               \r\n                <button className=\"Board__Item\" key={key} data-index={key} onClick={() => onClicked(key)}>\r\n                    {item ? item : \"\" }\r\n                </button>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport classnames from 'classnames';\r\nimport \"./Piece.scss\";\r\n\r\ninterface IToggle {\r\n    on: boolean\r\n    piece: string\r\n    id?: string\r\n}\r\n\r\nexport const Piece = (props: IToggle) => {\r\n    const { id, on, piece } = props;\r\n\r\n    return (\r\n        <div className=\"Piece\" id={id}>\r\n            <p className={classnames(\"Piece__Label\", { 'Piece__Label--on' : on })}>{piece}</p>                        \r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Board, Piece, WhoWon, GameState, Button } from './components'\r\nimport { findEmptySquares, minimax, hasPlayerWon } from './Mechanics';\r\nimport Modal from 'react-modal';\r\n\r\ninterface IState {\r\n    grid: Array<string>;\r\n    turn: Pieces,\r\n    playerPiece: Pieces,\r\n    computerPiece: Pieces,\r\n    showModal: boolean\r\n    gameState: GameState | undefined\r\n}\r\n\r\nexport enum Pieces {\r\n    X = 'X',\r\n    O = 'O'\r\n}\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nexport class Game extends React.Component<any, IState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            grid: Array(9).fill(''),\r\n            turn: Pieces.X,\r\n            playerPiece: Pieces.X,\r\n            computerPiece: Pieces.O,\r\n            showModal: false,\r\n            gameState: undefined\r\n        }\r\n    }\r\n\r\n    hasGameEnded = () => {\r\n        const { grid, computerPiece, playerPiece } = this.state;  \r\n        if (hasPlayerWon(grid, computerPiece)) {\r\n            this.setState({ gameState: GameState.Lose });\r\n        } else if (hasPlayerWon(grid, playerPiece)) {\r\n            this.setState({ gameState: GameState.Win });\r\n        } else if (findEmptySquares(grid).length === 0 ) {\r\n            this.setState({ gameState: GameState.Draw });\r\n        }\r\n        \r\n        return hasPlayerWon(grid, computerPiece) || hasPlayerWon(grid, playerPiece) || findEmptySquares(grid).length === 0;            \r\n    }\r\n\r\n    closeWhoWonModal = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n    openWhoWonModal = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    onSquareClicked = async (index: number) => {\r\n        const { grid, turn, computerPiece, gameState } = this.state;\r\n        \r\n        if (grid[index] != '' || gameState !== undefined ) { return; }\r\n\r\n        grid.splice(index, 1, turn);\r\n        const nextPlayer = turn === Pieces.X ? Pieces.O : Pieces.X;\r\n\r\n        await this.setState({\r\n            grid: grid,\r\n            turn: nextPlayer\r\n        });\r\n\r\n        if (this.hasGameEnded()) {\r\n            this.openWhoWonModal();\r\n            return;\r\n        }\r\n\r\n        if (nextPlayer === computerPiece) {\r\n            this.getComputerMove();\r\n        }        \r\n    }\r\n\r\n    getComputerMove = () => {\r\n        const { grid, computerPiece, playerPiece } = this.state;\r\n\r\n        const emptySquares = findEmptySquares(grid).length;\r\n        const move = minimax(grid, computerPiece, playerPiece, computerPiece, emptySquares).move;\r\n        this.onSquareClicked(move);\r\n    }\r\n\r\n    resetGame = () => {\r\n        this.setState({\r\n            grid: Array(9).fill(''),\r\n            gameState: undefined,\r\n            turn: Pieces.X\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { grid, showModal, turn, gameState } = this.state;\r\n\r\n        return (\r\n            <div className=\"Game\">          \r\n                <Modal\r\n                    className=\"WhoWon__Modal\"\r\n                    overlayClassName=\"WhoWon__Modal__Overlay\"                        \r\n                    isOpen={showModal}\r\n                    shouldCloseOnEsc={true}\r\n                    shouldCloseOnOverlayClick={true}\r\n                    onRequestClose={this.closeWhoWonModal}\r\n                > \r\n                    <i className=\"material-icons WhoWon__Modal__Close__Icon\" onClick={this.closeWhoWonModal}>close</i>\r\n                    <WhoWon gameState={gameState}/>          \r\n                </Modal>\r\n                <div className=\"Game__Pieces\">\r\n                    <Piece id=\"X_Piece\" on={ turn == Pieces.X } piece=\"x\"/>         \r\n                    <Piece id=\"O_Piece\" on={ turn == Pieces.O} piece=\"o\"/>  \r\n                </div>  \r\n                <Board grid={grid} onClicked={this.onSquareClicked}/> \r\n                <Button onClick={this.resetGame} label=\"Restart\"/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nimport './Button.scss';\r\n\r\nexport const Button = (props: any) => {\r\n    return (\r\n        <div className=\"Button\">\r\n            <button className=\"Button__Btn\" {...props}>\r\n                {props.label}\r\n            </button>\r\n        </div>\r\n    )\r\n}","import { Pieces } from \"./Game\";\r\n\r\nconst winningSquares = [\r\n    [0, 1, 2],\r\n    [3, 4, 5], \r\n    [6, 7, 8], \r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [6, 4, 2]\r\n];\r\n\r\n// Determine if the given piece has won for a 3x3 tic tac toe game\r\nexport const hasPlayerWon = (board: Array<string>, piece: Pieces): boolean => {\r\n    for (let i = 0; i < winningSquares.length; i++) {\r\n        if (board[winningSquares[i][0]] === piece &&\r\n            board[winningSquares[i][1]] === piece &&\r\n            board[winningSquares[i][2]] === piece) {\r\n                return true;\r\n            }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport const findEmptySquares = (board: Array<string>): Array<number> => {\r\n    let emptySquares = [];\r\n    for (let i = 0; i < board.length; i++) {\r\n        if (board[i] === '') {\r\n            emptySquares.push(i);\r\n        }\r\n    }\r\n    \r\n    return emptySquares;\r\n}\r\n\r\n// Minimax: \r\n// 1. Check if the board has a winner. If the winner is the given player\r\n// then return a positive score (1) else return a negative score (-1).\r\n// 2. Try every move possible and recursively calculate the minimax score for it.\r\n//      Recursion continues until it reaches a terminal state that allows it to\r\n//      return a score\r\n// 3. Return 0 if there is a draw\r\n// When recursion has finished the algorithm will return the index of the best move\r\ninterface IBestMoveAndScore { \r\n    move: number;\r\n    score: number;\r\n}\r\n\r\nconst evaluateGame = (board: Array<string>, computerPlayer: Pieces, humanPlayer: Pieces) => {\r\n    let score = 0;\r\n    if (hasPlayerWon(board, computerPlayer)) {\r\n        score++;\r\n    } else if (hasPlayerWon(board, humanPlayer)) {\r\n        score--;\r\n    } \r\n    return score;\r\n}\r\n\r\nexport const minimax = (board: Array<string>, computerPlayer: Pieces, humanPlayer: Pieces, player: Pieces, depth: number) => {\r\n    let bestMoveAndScore: IBestMoveAndScore = {move: -1, score: 0};\r\n\r\n    const emptySquares = findEmptySquares(board);\r\n\r\n    bestMoveAndScore.score = player === computerPlayer ? -1000 : 1000;\r\n\r\n    if (depth === 0 || hasPlayerWon(board, computerPlayer) || hasPlayerWon(board, humanPlayer)) {\r\n        return {move: -1, score: evaluateGame(board, computerPlayer, humanPlayer)};\r\n    }\r\n\r\n    emptySquares.forEach(index => {\r\n        board[index] = player;\r\n\r\n        let nextPlayer = player === computerPlayer ? humanPlayer : computerPlayer;\r\n        let tempMoveAndScore = minimax(board, computerPlayer, humanPlayer, nextPlayer, depth-1);\r\n\r\n        board[index] = '';\r\n\r\n        if (player === computerPlayer && tempMoveAndScore.score > bestMoveAndScore.score) {\r\n            bestMoveAndScore.score = tempMoveAndScore.score;\r\n            bestMoveAndScore.move = index;\r\n        } else if (player === humanPlayer && tempMoveAndScore.score < bestMoveAndScore.score) {\r\n            bestMoveAndScore.score = tempMoveAndScore.score;\r\n            bestMoveAndScore.move = index;\r\n        }\r\n    });\r\n\r\n    return bestMoveAndScore;\r\n}","import React from 'react';\nimport { Game } from './Game';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}